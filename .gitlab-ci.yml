workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_COMMIT_TAG'

variables:
  # Maven Configuration
  MAVEN_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Xmx2048m -XX:MaxMetaspaceSize=512m"
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"

  # Application Configuration
  APP_NAME: "account-service"
  BACKEND_IMAGE: "$CI_REGISTRY_IMAGE/backend"
  FRONTEND_IMAGE: "$CI_REGISTRY_IMAGE/frontend"

  NODE_VERSION: "20"

  # Sonarqube Configuration
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
  GIT_DEPTH: "0"

  # Gitops Configuration
  GITOPS_STAGING_REPO: "${GITOPS_STAGING_REPO_URL}"
  GITOPS_PROD_REPO: "${GITOPS_PROD_REPO_URL}"
  STAGING_BASE_URL: "${STAGING_URL}"
  PRODUCTION_BASE_URL: "${PRODUCTION_URL}"


# YAML ANCHOR TEMPLATES
# Base job templates
.java_template: &java_base
  image: openjdk:21-jdk-slim
  before_script:
    - apt-get update -qq && apt-get install -y -qq maven git curl
    - java --version
    - mvn --version
    - cd backend  # Change to backend directory where pom.xml is located

.node_template: &node_base
  image: node:${NODE_VERSION}-alpine
  before_script:
    - node --version
    - npm --version
    - cd frontend/bank-account-app
    - npm ci --prefer-offline
    - npx ng version  # This ensures Angular CLI is available

.gitops_template: &gitops_base
  image: alpine/git:latest
  before_script:
    - apk add --no-cache yq openssh-client
    - eval $(ssh-agent -s)
    - echo "$GITOPS_SSH_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan gitlab.com >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

# Cache templates
.maven_cache: &maven_cache
  cache:
    key: "$CI_COMMIT_REF_SLUG-maven"
    fallback_keys:
      - "main-maven"
      - "develop-maven"
    paths:
      - .m2/repository/
    policy: pull-push

.node_cache: &node_cache
  cache:
    key: "$CI_COMMIT_REF_SLUG-node"
    fallback_keys:
      - "main-node"
      - "develop-node"
    paths:
      - frontend/bank-account-app/node_modules/
    policy: pull-push

# Change detection rules
.backend_changes: &backend_changes
  changes:
    - backend/**/*
    - Dockerfile

.frontend_changes: &frontend_changes
  changes:
    - frontend/**/*
    - Dockerfile.frontend

# Resource limits
.resource_limits: &resource_limits
  variables:
    KUBERNETES_CPU_REQUEST: "500m"
    KUBERNETES_CPU_LIMIT: "2"
    KUBERNETES_MEMORY_REQUEST: "1Gi"
    KUBERNETES_MEMORY_LIMIT: "4Gi"

# Combined templates for efficiency
.java_with_cache: &java_with_cache
  <<: *java_base
  <<: *maven_cache

.node_with_cache: &node_with_cache
  <<: *node_base
  <<: *node_cache

# Streamlined stages
stages:
  - validate-build
  - test-security
  - package
  - deploy-staging
  - e2e-test
  - deploy-production

# VALIDATE & BUILD STAGE: Combined validation, compilation, and builds

secret-detection:
  stage: validate-build
  image:
    name: "zricethezav/gitleaks:latest"
    entrypoint: [""]
  script:
    - echo "🛡️ Scanning for hardcoded secrets..."
    # The --exit-code 1 flag will fail the job if secrets are found
    - gitleaks detect --verbose --report-path gitleaks-report.json --exit-code 1
  artifacts:
    paths:
      - gitleaks-report.json
    when: always

validate-and-build-backend:
  stage: validate-build
  <<: *java_with_cache
  <<: *resource_limits
  tags:
    - kubernetes
  script:
    - echo " Validating, compiling, and building backend..."
    - mvn $MAVEN_CLI_OPTS validate
    - mvn $MAVEN_CLI_OPTS dependency:analyze
    - mvn $MAVEN_CLI_OPTS clean compile
    - mvn $MAVEN_CLI_OPTS compiler:testCompile
    - echo " Backend validation and compilation complete"
    - ls -la target/
  artifacts:
    paths:
      - backend/target/classes/
      - backend/target/test-classes/
    expire_in: 2 hours
  rules:
    - <<: *backend_changes
      if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - <<: *backend_changes
      if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - <<: *backend_changes
      if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_DRAFT != "true"

validate-and-build-frontend:
  stage: validate-build
  <<: *node_with_cache

  script:
    - echo " Validating and building frontend..."
    - npm audit --audit-level=high
    - npm run build
    - echo " Frontend build complete"
    - ls -la dist/
  artifacts:
    paths:
      - frontend/bank-account-app/dist/
    expire_in: 2 hours
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - <<: *frontend_changes
      if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - <<: *frontend_changes
      if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_DRAFT != "true"



# TEST & SECURITY STAGE: Parallel testing and security scans


backend-unit-tests:
  stage: test-security
  <<: *java_with_cache
  tags:
    - kubernetes  # Run on your cluster (Job 2/4)
  script:
    - echo "🧪 Running backend unit tests..."
    - mvn $MAVEN_CLI_OPTS test -Dspring.profiles.active=test
    - echo "📊 Generating test coverage report..."
    - mvn jacoco:report
  coverage: '/Total.*?([0-9]{1,3})%/'
  artifacts:
    when: always
    reports:
      junit:
        - backend/target/surefire-reports/TEST-*.xml
      coverage_report:
        coverage_format: jacoco
        path: backend/target/site/jacoco/jacoco.xml
    paths:
      - backend/target/surefire-reports/
      - backend/target/site/jacoco/
    expire_in: 1 week
  rules:
    - <<: *backend_changes
      if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - <<: *backend_changes
      if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - <<: *backend_changes
      if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_DRAFT != "true"
  needs:
    - validate-and-build-backend

backend-integration-tests:
  stage: test-security
  <<: *java_with_cache

  script:
    - echo "🔗 Running backend integration tests..."
    - mvn $MAVEN_CLI_OPTS verify -Dspring.profiles.active=integration-test -DskipUnitTests=true
  artifacts:
    when: always
    reports:
      junit:
        - backend/target/failsafe-reports/TEST-*.xml
    paths:
      - backend/target/failsafe-reports/
    expire_in: 1 week
  rules:
    - <<: *backend_changes
      if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - <<: *backend_changes
      if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_DRAFT != "true"
  needs:
    - validate-and-build-backend

sonarqube-backend:
  stage: test-security
  <<: *java_base
  <<: *maven_cache
  tags:
    - kubernetes  # MUST run on your cluster (Job 3/4) - SonarQube instance is there
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - echo "🔍 Running SonarQube analysis..."
    - echo "Using existing SonarQube instance on cluster..."
    - apt-get update -qq && apt-get install -y -qq wget unzip
    - java -version
    - wget -q https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
    - unzip -q sonar-scanner-cli-5.0.1.3006-linux.zip
    - export PATH="$PWD/sonar-scanner-5.0.1.3006-linux/bin:$PATH"
    - sonar-scanner -Dsonar.host.url=${SONAR_HOST_URL} -Dsonar.login=${SONAR_TOKEN} -Dsonar.projectKey=${CI_PROJECT_NAME} -Dsonar.projectName="${CI_PROJECT_NAME}" -Dsonar.projectVersion=${CI_COMMIT_SHORT_SHA} -Dsonar.sources=src/main/java -Dsonar.tests=src/test/java -Dsonar.java.binaries=target/classes -Dsonar.java.test.binaries=target/test-classes -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml -Dsonar.junit.reportPaths=target/surefire-reports -Dsonar.qualitygate.wait=true
  rules:
    - <<: *backend_changes
      if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - <<: *backend_changes
      if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_DRAFT != "true"

  needs:
    - validate-and-build-backend
    - backend-unit-tests

  allow_failure: false

# Trivy filesystem scan
trivy-filesystem-scan:
  stage: test-security
  image:
    name: aquasec/trivy:latest
    entrypoint: [""]

  dependencies: []
  before_script:
    - trivy --version
  script:
    - echo "🛡️ Scanning dependencies for vulnerabilities..."
    - trivy fs --format json --output trivy-report.json .
    - trivy fs --exit-code 1 --severity HIGH,CRITICAL --format table .
  artifacts:
    paths:
      - trivy-report.json
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_DRAFT != "true"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  allow_failure: false


# PACKAGE STAGE: Docker builds and image scans

package-backend:
  stage: package
  image: openjdk:21-jdk-slim
  script:
    - echo "Packaging backend application..."
    - cd backend
    - chmod +x mvnw
    - ./mvnw package -DskipTests -DskipITs
    - echo "JAR packaging complete"
  artifacts:
    paths:
      - backend/target/*.jar
    expire_in: 1 hour
  rules:
    - <<: *backend_changes
      if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  needs:
    - job: validate-and-build-backend
      artifacts: true
    - job: sonarqube-backend
      artifacts: false
    - job: trivy-filesystem-scan
      artifacts: false
    - job: backend-integration-tests
      artifacts: false

# Docker builds using Kaniko with integrated packaging
docker-build-backend:
  stage: package
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  script:
    - echo "Building backend Docker image with Kaniko..."
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --destination "${BACKEND_IMAGE}:${CI_COMMIT_SHORT_SHA}"
      --destination "${BACKEND_IMAGE}:latest"
      --cache=true
      --cache-ttl=24h
    - echo "BACKEND_IMAGE_TAG=${BACKEND_IMAGE}:${CI_COMMIT_SHORT_SHA}" > build.env
  artifacts:
    reports:
      dotenv: build.env
  rules:
    - <<: *backend_changes
      if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  needs:
    - job: package-backend
      artifacts: true

docker-build-frontend:
  stage: package
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]

  script:
    - echo " Building frontend Docker image with Kaniko..."
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile.frontend"
      --destination "${FRONTEND_IMAGE}:${CI_COMMIT_SHORT_SHA}"
      --destination "${FRONTEND_IMAGE}:latest"
      --cache=true
      --cache-ttl=24h
    - echo "FRONTEND_IMAGE_TAG=${FRONTEND_IMAGE}:${CI_COMMIT_SHORT_SHA}" >> build.env
  artifacts:
    reports:
      dotenv: build.env
  rules:
    - <<: *frontend_changes
      if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  needs:
    - validate-and-build-frontend

# Image scanning
trivy-scan-backend-image:
  stage: package
  image:
    name: aquasec/trivy:latest
    entrypoint: [""]

  before_script:
    - trivy --version
  script:
    - echo "🛡️ Scanning backend Docker image for vulnerabilities..."
    - trivy image --format json --output backend-trivy-report.json ${BACKEND_IMAGE}:${CI_COMMIT_SHORT_SHA}
    - trivy image --exit-code 1 --severity HIGH,CRITICAL --format table ${BACKEND_IMAGE}:${CI_COMMIT_SHORT_SHA}
  artifacts:
    paths:
      - backend-trivy-report.json
  rules:
    - <<: *backend_changes
      if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  needs:
    - job: docker-build-backend
      artifacts: false

  allow_failure: false

trivy-scan-frontend-image:
  stage: package
  image:
    name: aquasec/trivy:latest
    entrypoint: [""]

  before_script:
    - trivy --version
  script:
    - echo "🛡️ Scanning frontend Docker image for vulnerabilities..."
    - trivy image --format json --output frontend-trivy-report.json ${FRONTEND_IMAGE}:${CI_COMMIT_SHORT_SHA}
    - trivy image --exit-code 1 --severity HIGH,CRITICAL --format table ${FRONTEND_IMAGE}:${CI_COMMIT_SHORT_SHA}
  artifacts:
    paths:
      - frontend-trivy-report.json
  rules:
    - <<: *frontend_changes
      if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  needs:
    - job: docker-build-frontend
      artifacts: false

  allow_failure: false


# DEPLOY STAGING STAGE: GitOps deployment

deploy-staging:
  stage: deploy-staging
  <<: *gitops_base
  tags:
    - kubernetes
  script:
    - echo " Deploying to staging via GitOps..."
    - git clone $GITOPS_STAGING_REPO gitops-staging
    - cd gitops-staging
    - |
      # Update image tags
      if [ -n "$BACKEND_IMAGE" ]; then
        yq eval ".spec.template.spec.containers[0].image = \"${BACKEND_IMAGE}:${CI_COMMIT_SHORT_SHA}\"" -i applications/backend/deployment.yaml
        echo "Updated backend image to: ${BACKEND_IMAGE}:${CI_COMMIT_SHORT_SHA}"
      fi
      if [ -n "$FRONTEND_IMAGE" ]; then
        yq eval ".spec.template.spec.containers[0].image = \"${FRONTEND_IMAGE}:${CI_COMMIT_SHORT_SHA}\"" -i applications/frontend/deployment.yaml
        echo "Updated frontend image to: ${FRONTEND_IMAGE}:${CI_COMMIT_SHORT_SHA}"
      fi
    - |
      # Commit and push
      git config user.name "GitLab CI"
      git config user.email "ci@gitlab.com"
      git add .
      if git diff --staged --quiet; then
        echo "No changes to commit"
      else
        git commit -m "Deploy ${APP_NAME} ${CI_COMMIT_SHORT_SHA} to staging"
        git push origin main
        echo " Staging deployment triggered"
      fi
  environment:
    name: staging
    url: $STAGING_BASE_URL
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  needs:
    - job: trivy-scan-backend-image
      artifacts: false
    - job: trivy-scan-frontend-image
      artifacts: false

# GitLab CI/CD Pipeline - Full Stack Application
# Author: DevOps Team
# Version: 4.0.0
# Description: Optimized CI/CD pipeline for Kubernetes deployment with Flux - Backend focus with simplified integration tests

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_BRANCH =~ /^feature\/.*/
    - if: $CI_COMMIT_BRANCH =~ /^hotfix\/.*/
    - if: $CI_COMMIT_BRANCH =~ /^bugfix\/.*/

variables:
  # Maven Configuration
  MAVEN_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Xmx2048m -XX:MaxMetaspaceSize=512m"
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"

  # Application Configuration
  BACKEND_APP_NAME: "account-service-backend"
  FRONTEND_APP_NAME: "account-service-frontend"

  # Node.js Configuration
  NODE_VERSION: "20"
  NPM_CONFIG_CACHE: "$CI_PROJECT_DIR/.npm"

  # SonarQube Configuration (Backend only)
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
  GIT_DEPTH: "0"

  # Container Registry Configuration
  REGISTRY: "$CI_REGISTRY"
  BACKEND_IMAGE: "$CI_REGISTRY_IMAGE/backend"
  FRONTEND_IMAGE: "$CI_REGISTRY_IMAGE/frontend"

# Global cache configurations
.maven_cache: &maven_cache
  cache:
    key: "$CI_COMMIT_REF_SLUG-maven"
    paths:
      - .m2/repository/
    policy: pull-push

.node_cache: &node_cache
  cache:
    key: "$CI_COMMIT_REF_SLUG-node"
    paths:
      - frontend/bank-account-app/node_modules/
      - .npm/
    policy: pull-push

# Change detection rules
.backend_changes: &backend_changes
  changes:
    - backend/**/*
    - Dockerfile

.frontend_changes: &frontend_changes
  changes:
    - frontend/**/*
    - Dockerfile.frontend

# Base job templates
.java_template: &java_base
  image: openjdk:21-jdk-slim
  before_script:
    - apt-get update -qq && apt-get install -y -qq maven git curl
    - java --version
    - mvn --version

.node_template: &node_base
  image: node:${NODE_VERSION}-alpine
  before_script:
    - node --version
    - npm --version
    - cd frontend/bank-account-app

.kaniko_template: &kaniko_base
  image: gcr.io/kaniko-project/executor:v1.9.0-debug

stages:
  - .pre
  - validate
  - test
  - security
  - build
  - integration-test
  - e2e-test
  - .post

# =============================================================================
# PRE-STAGE: Environment Setup and Cache Warming
# =============================================================================

cache-backend-dependencies:
  stage: .pre
  <<: *java_base
  <<: *maven_cache
  script:
    - cd backend
    - mvn $MAVEN_CLI_OPTS dependency:go-offline
    - mvn $MAVEN_CLI_OPTS dependency:resolve-sources
  rules:
    - <<: *backend_changes
      if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - <<: *backend_changes
      if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - <<: *backend_changes
      if: $CI_COMMIT_BRANCH =~ /^feature\/.*/

cache-frontend-dependencies:
  stage: .pre
  <<: *node_base
  <<: *node_cache
  script:
    - npm ci --cache .npm --prefer-offline
  rules:
    - <<: *frontend_changes
      if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - <<: *frontend_changes
      if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - <<: *frontend_changes
      if: $CI_COMMIT_BRANCH =~ /^feature\/.*/

# =============================================================================
# VALIDATION STAGE: Code Quality and Structure Validation
# =============================================================================

validate-backend:
  stage: validate
  <<: *java_base
  <<: *maven_cache
  script:
    - echo "🔍 Validating backend project structure and dependencies..."
    - cd backend
    - mvn $MAVEN_CLI_OPTS validate
    - mvn $MAVEN_CLI_OPTS dependency:analyze
  artifacts:
    expire_in: 1 hour
  rules:
    - <<: *backend_changes
      if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - <<: *backend_changes
      if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - <<: *backend_changes
      if: $CI_COMMIT_BRANCH =~ /^feature\/.*/

validate-frontend:
  stage: validate
  <<: *node_base
  <<: *node_cache
  script:
    - echo "🔍 Validating frontend project structure..."
    - npm run ng -- version
    - npm audit --audit-level=high
  rules:
    - <<: *frontend_changes
      if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - <<: *frontend_changes
      if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - <<: *frontend_changes
      if: $CI_COMMIT_BRANCH =~ /^feature\/.*/

compile-backend:
  stage: validate
  <<: *java_base
  <<: *maven_cache
  script:
    - echo "🏗️ Compiling backend application..."
    - cd backend
    - mvn $MAVEN_CLI_OPTS clean compile
    - mvn $MAVEN_CLI_OPTS compiler:testCompile
  artifacts:
    paths:
      - backend/target/classes/
      - backend/target/test-classes/
    expire_in: 2 hours
  rules:
    - <<: *backend_changes
      if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - <<: *backend_changes
      if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - <<: *backend_changes
      if: $CI_COMMIT_BRANCH =~ /^feature\/.*/

# =============================================================================
# TEST STAGE: Unit Tests
# =============================================================================

backend-unit-tests:
  stage: test
  <<: *java_base
  <<: *maven_cache
  script:
    - echo "🧪 Running backend unit tests..."
    - cd backend
    - mvn $MAVEN_CLI_OPTS test -Dspring.profiles.active=test
    - echo "📊 Generating test coverage report..."
    - mvn jacoco:report
  coverage: '/Total.*?([0-9]{1,3})%/'
  artifacts:
    when: always
    reports:
      junit:
        - backend/target/surefire-reports/TEST-*.xml
      coverage_report:
        coverage_format: jacoco
        path: backend/target/site/jacoco/jacoco.xml
    paths:
      - backend/target/surefire-reports/
      - backend/target/site/jacoco/
    expire_in: 1 week
  rules:
    - <<: *backend_changes
      if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - <<: *backend_changes
      if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - <<: *backend_changes
      if: $CI_COMMIT_BRANCH =~ /^feature\/.*/
  dependencies:
    - compile-backend

frontend-unit-tests:
  stage: test
  <<: *node_base
  <<: *node_cache
  script:
    - echo "🧪 Running frontend unit tests..."
    - npm run test -- --no-watch --no-progress --browsers=ChromeHeadlessCI --code-coverage
  coverage: '/Lines.*?(\d+(?:\.\d+)?)%/'
  artifacts:
    when: always
    reports:
      junit:
        - frontend/bank-account-app/coverage/bank-account-app/junit.xml
      coverage_report:
        coverage_format: cobertura
        path: frontend/bank-account-app/coverage/bank-account-app/cobertura-coverage.xml
    paths:
      - frontend/bank-account-app/coverage/
    expire_in: 1 week
  rules:
    - <<: *frontend_changes
      if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - <<: *frontend_changes
      if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - <<: *frontend_changes
      if: $CI_COMMIT_BRANCH =~ /^feature\/.*/

# =============================================================================
# SECURITY & QUALITY STAGE: SonarQube Analysis (Backend Only)
# =============================================================================

sonarqube-backend:
  stage: security
  <<: *java_base
  <<: *maven_cache
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - echo "🔍 Running SonarQube analysis for backend..."
    - apt-get update -qq && apt-get install -y -qq wget unzip
    - wget -q https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
    - unzip -q sonar-scanner-cli-5.0.1.3006-linux.zip
    - export PATH="$PWD/sonar-scanner-5.0.1.3006-linux/bin:$PATH"
    - cd backend
    - sonar-scanner
      -Dsonar.host.url=${SONAR_HOST_URL}
      -Dsonar.login=${SONAR_TOKEN}
      -Dsonar.projectKey=${CI_PROJECT_NAME}-backend
      -Dsonar.projectName="${CI_PROJECT_NAME}-backend"
      -Dsonar.projectVersion=${CI_COMMIT_SHORT_SHA}
      -Dsonar.sources=src/main/java
      -Dsonar.tests=src/test/java
      -Dsonar.java.binaries=target/classes
      -Dsonar.java.test.binaries=target/test-classes
      -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
      -Dsonar.junit.reportPaths=target/surefire-reports
      -Dsonar.qualitygate.wait=true
  rules:
    - <<: *backend_changes
      if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - <<: *backend_changes
      if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - <<: *backend_changes
      if: $CI_COMMIT_BRANCH =~ /^feature\/.*/
  dependencies:
    - backend-unit-tests
    - compile-backend
  allow_failure: false

dependency-security-scan:
  stage: security
  <<: *java_base
  <<: *maven_cache
  script:
    - echo "🛡️ Running dependency security scan..."
    - cd backend
    - mvn $MAVEN_CLI_OPTS org.owasp:dependency-check-maven:check
  artifacts:
    when: always
    paths:
      - backend/target/dependency-check-report.html
    expire_in: 1 week
  rules:
    - <<: *backend_changes
      if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - <<: *backend_changes
      if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  allow_failure: true

# =============================================================================
# BUILD STAGE: Application Packaging and Container Images
# =============================================================================

build-backend:
  stage: build
  <<: *java_base
  <<: *maven_cache
  script:
    - echo "📦 Building backend application..."
    - cd backend
    - mvn $MAVEN_CLI_OPTS clean package -DskipTests
    - echo "✅ Backend packaged successfully"
    - ls -la target/
  artifacts:
    paths:
      - backend/target/*.jar
    expire_in: 1 day
  rules:
    - <<: *backend_changes
      if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - <<: *backend_changes
      if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  dependencies:
    - compile-backend

build-frontend:
  stage: build
  <<: *node_base
  <<: *node_cache
  script:
    - echo "📦 Building frontend application..."
    - npm run build --prod
    - echo "✅ Frontend built successfully"
    - ls -la dist/
  artifacts:
    paths:
      - frontend/bank-account-app/dist/
    expire_in: 1 day
  rules:
    - <<: *frontend_changes
      if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - <<: *frontend_changes
      if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

docker-build-backend:
  stage: build
  <<: *kaniko_base
  script:
    - echo "🐳 Building backend Docker image..."
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --destination "${BACKEND_IMAGE}:${CI_COMMIT_SHORT_SHA}"
      --destination "${BACKEND_IMAGE}:latest"
  rules:
    - <<: *backend_changes
      if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  dependencies:
    - build-backend

docker-build-frontend:
  stage: build
  <<: *kaniko_base
  script:
    - echo "🐳 Building frontend Docker image..."
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile.frontend"
      --destination "${FRONTEND_IMAGE}:${CI_COMMIT_SHORT_SHA}"
      --destination "${FRONTEND_IMAGE}:latest"
  rules:
    - <<: *frontend_changes
      if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  dependencies:
    - build-frontend

# =============================================================================
# INTEGRATION TEST STAGE: Simplified Backend Database Integration with H2
# =============================================================================

backend-integration-tests:
  stage: integration-test
  <<: *java_base
  <<: *maven_cache
  script:
    - echo "🔗 Running simplified backend integration tests with H2 database..."
    - cd backend
    - echo "Starting H2 in-memory database for integration tests"
    - mvn $MAVEN_CLI_OPTS test -Dspring.profiles.active=integration-test -Dtest="*IntegrationTest"
  artifacts:
    when: always
    reports:
      junit:
        - backend/target/failsafe-reports/TEST-*.xml
    paths:
      - backend/target/failsafe-reports/
    expire_in: 1 week
  rules:
    - <<: *backend_changes
      if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - <<: *backend_changes
      if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - <<: *backend_changes
      if: $CI_COMMIT_BRANCH =~ /^feature\/.*/
  dependencies:
    - build-backend

# =============================================================================
# E2E TEST STAGE: End-to-End Testing with Cypress
# =============================================================================

e2e-tests:
  stage: e2e-test
  image: cypress/included:13.6.2
  variables:
    CYPRESS_CACHE_FOLDER: "$CI_PROJECT_DIR/.cypress"
  cache:
    key: "$CI_COMMIT_REF_SLUG-cypress"
    paths:
      - .cypress/
      - frontend/bank-account-app/node_modules/
  before_script:
    - echo "🎭 Setting up E2E testing environment..."
    - cd frontend/bank-account-app
    - npm ci
  script:
    - echo "🧪 Running E2E tests with Cypress..."
    - npm run e2e:headless
  artifacts:
    when: always
    paths:
      - frontend/bank-account-app/cypress/screenshots/
      - frontend/bank-account-app/cypress/videos/
    reports:
      junit:
        - frontend/bank-account-app/cypress/results/junit.xml
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: manual
      allow_failure: true
  dependencies:
    - docker-build-backend
    - docker-build-frontend

# =============================================================================
# POST-STAGE: Cleanup and Notifications
# =============================================================================

cleanup-workspace:
  stage: .post
  image: alpine:latest
  script:
    - echo "🧹 Cleaning up workspace..."
    - rm -rf backend/target/
    - rm -rf frontend/bank-account-app/dist/
    - rm -rf frontend/bank-account-app/node_modules/
  when: always
  allow_failure: true

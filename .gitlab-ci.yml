# GitLab CI/CD Pipeline - Clean & Efficient
# Author: DevOps Team
# Version: 5.0.0
# Description: Optimized pipeline following latest GitLab CI best practices

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_BRANCH =~ /^feature\/.*/
    - if: $CI_COMMIT_BRANCH =~ /^hotfix\/.*/
    - if: $CI_COMMIT_BRANCH =~ /^bugfix\/.*/

variables:
  # Maven Configuration - using your exact working config
  MAVEN_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Xmx2048m -XX:MaxMetaspaceSize=512m"
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"

  # Application Configuration
  APP_NAME: "account-service"
  BACKEND_IMAGE: "$CI_REGISTRY_IMAGE/backend"
  FRONTEND_IMAGE: "$CI_REGISTRY_IMAGE/frontend"

  # Node.js Configuration
  NODE_VERSION: "20"

  # SonarQube Configuration
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
  GIT_DEPTH: "0"

  # GitOps Configuration
  GITOPS_STAGING_REPO: "${GITOPS_STAGING_REPO_URL}"
  GITOPS_PROD_REPO: "${GITOPS_PROD_REPO_URL}"
  STAGING_BASE_URL: "${STAGING_URL}"
  PRODUCTION_BASE_URL: "${PRODUCTION_URL}"

# =============================================================================
# YAML ANCHOR TEMPLATES - Using Your Proven Working Configurations
# =============================================================================

# Base job templates - EXACT copies from your working examples
.java_template: &java_base
  image: openjdk:21-jdk-slim
  before_script:
    - apt-get update -qq && apt-get install -y -qq maven git curl
    - java --version
    - mvn --version
    - cd backend  # Change to backend directory where pom.xml is located

.node_template: &node_base
  image: node:${NODE_VERSION}-alpine
  before_script:
    - node --version
    - npm --version
    - cd frontend/bank-account-app
    - npm ci --prefer-offline
    - npx ng version  # This ensures Angular CLI is available

.gitops_template: &gitops_base
  image: alpine/git:latest
  before_script:
    - apk add --no-cache yq openssh-client
    - eval $(ssh-agent -s)
    - echo "$GITOPS_SSH_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan gitlab.com >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

# Cache templates with fallback keys (Claude's recommendation)
.maven_cache: &maven_cache
  cache:
    key: "$CI_COMMIT_REF_SLUG-maven"
    fallback_keys:
      - "main-maven"
      - "develop-maven"
    paths:
      - .m2/repository/
    policy: pull-push

.node_cache: &node_cache
  cache:
    key: "$CI_COMMIT_REF_SLUG-node"
    fallback_keys:
      - "main-node"
      - "develop-node"
    paths:
      - frontend/bank-account-app/node_modules/
    policy: pull-push

# Change detection rules
.backend_changes: &backend_changes
  changes:
    - backend/**/*
    - Dockerfile

.frontend_changes: &frontend_changes
  changes:
    - frontend/**/*
    - Dockerfile.frontend

# Resource limits (Claude's recommendation)
.resource_limits: &resource_limits
  variables:
    KUBERNETES_CPU_REQUEST: "500m"
    KUBERNETES_CPU_LIMIT: "2"
    KUBERNETES_MEMORY_REQUEST: "1Gi"
    KUBERNETES_MEMORY_LIMIT: "4Gi"

# Combined templates for efficiency
.java_with_cache: &java_with_cache
  <<: *java_base
  <<: *maven_cache

.node_with_cache: &node_with_cache
  <<: *node_base
  <<: *node_cache

# Streamlined stages (Claude's recommendation: 9 → 6)
stages:
  - validate-build
  - test-security
  - package
  - deploy-staging
  - e2e-test
  - deploy-production

# =============================================================================
# VALIDATE & BUILD STAGE: Combined validation, compilation, and builds
# =============================================================================

validate-and-build-backend:
  stage: validate-build
  <<: *java_with_cache
  <<: *resource_limits
  script:
    - echo "🔍 Validating, compiling, and building backend..."
    - mvn $MAVEN_CLI_OPTS validate
    - mvn $MAVEN_CLI_OPTS dependency:analyze
    - mvn $MAVEN_CLI_OPTS clean compile
    - mvn $MAVEN_CLI_OPTS compiler:testCompile
    - mvn $MAVEN_CLI_OPTS package -DskipTests
    - echo "✅ Backend build complete"
    - ls -la target/
  artifacts:
    paths:
      - backend/target/*.jar
      - backend/target/classes/
      - backend/target/test-classes/
    expire_in: 2 hours
  rules:
    - <<: *backend_changes
      if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - <<: *backend_changes
      if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - <<: *backend_changes
      if: $CI_COMMIT_BRANCH =~ /^feature\/.*/

validate-and-build-frontend:
  stage: validate-build
  <<: *node_with_cache
  script:
    - echo "🔍 Validating and building frontend..."
    - npm audit --audit-level=high
    - npm run build
    - echo "✅ Frontend build complete"
    - ls -la dist/
  artifacts:
    paths:
      - frontend/bank-account-app/dist/
    expire_in: 2 hours
  rules:
    - <<: *frontend_changes
      if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - <<: *frontend_changes
      if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - <<: *frontend_changes
      if: $CI_COMMIT_BRANCH =~ /^feature\/.*/

# =============================================================================
# TEST & SECURITY STAGE: Parallel testing and security scans
# =============================================================================

backend-unit-tests:
  stage: test-security
  <<: *java_with_cache
  script:
    - echo "🧪 Running backend unit tests..."
    - mvn $MAVEN_CLI_OPTS test -Dspring.profiles.active=test
    - echo "📊 Generating test coverage report..."
    - mvn jacoco:report
  coverage: '/Total.*?([0-9]{1,3})%/'
  artifacts:
    when: always
    reports:
      junit:
        - backend/target/surefire-reports/TEST-*.xml
      coverage_report:
        coverage_format: jacoco
        path: backend/target/site/jacoco/jacoco.xml
    paths:
      - backend/target/surefire-reports/
      - backend/target/site/jacoco/
    expire_in: 1 week
  rules:
    - <<: *backend_changes
      if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - <<: *backend_changes
      if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - <<: *backend_changes
      if: $CI_COMMIT_BRANCH =~ /^feature\/.*/
  needs:
    - validate-and-build-backend

backend-integration-tests:
  stage: test-security
  <<: *java_with_cache
  script:
    - echo "🔗 Running backend integration tests..."
    - mvn $MAVEN_CLI_OPTS verify -Dspring.profiles.active=integration-test -DskipUnitTests=true
  artifacts:
    when: always
    reports:
      junit:
        - backend/target/failsafe-reports/TEST-*.xml
    paths:
      - backend/target/failsafe-reports/
    expire_in: 1 week
  rules:
    - <<: *backend_changes
      if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - <<: *backend_changes
      if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  needs:
    - validate-and-build-backend

# SonarQube using your EXACT working configuration
sonarqube-backend:
  stage: test-security
  <<: *java_base
  <<: *maven_cache
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - echo "🔍 Running SonarQube analysis..."
    - echo "Using existing SonarQube instance on cluster..."
    - apt-get update -qq && apt-get install -y -qq wget unzip
    - wget -q https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
    - unzip -q sonar-scanner-cli-4.8.0.2856-linux.zip
    - export PATH="$PWD/sonar-scanner-4.8.0.2856-linux/bin:$PATH"
    - sonar-scanner
      -Dsonar.host.url=${SONAR_HOST_URL}
      -Dsonar.login=${SONAR_TOKEN}
      -Dsonar.projectKey=${CI_PROJECT_NAME}
      -Dsonar.projectName="${CI_PROJECT_NAME}"
      -Dsonar.projectVersion=${CI_COMMIT_SHORT_SHA}
      -Dsonar.sources=src/main/java
      -Dsonar.tests=src/test/java
      -Dsonar.java.binaries=target/classes
      -Dsonar.java.test.binaries=target/test-classes
      -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
      -Dsonar.junit.reportPaths=target/surefire-reports
      -Dsonar.qualitygate.wait=true
  rules:
    - <<: *backend_changes
      if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - <<: *backend_changes
      if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - <<: *backend_changes
      if: $CI_COMMIT_BRANCH =~ /^feature\/.*/
  needs:
    - backend-unit-tests
  allow_failure: true

# Trivy filesystem scan - using your exact working configuration
trivy-filesystem-scan:
  stage: test-security
  image:
    name: aquasec/trivy:latest
    entrypoint: [""]
  dependencies: []
  before_script:
    - trivy --version
  script:
    - echo "🛡️ Scanning dependencies for vulnerabilities..."
    - trivy fs --format json --output trivy-report.json .
    - trivy fs --exit-code 1 --severity HIGH,CRITICAL --format table .
  artifacts:
    paths:
      - trivy-report.json
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  allow_failure: false

# =============================================================================
# PACKAGE STAGE: Docker builds and image scans (Using your working examples)
# =============================================================================

# Backend packaging (following your example pattern)
package-backend:
  stage: package
  image: eclipse-temurin:21-jdk
  script:
    - echo "📦 Packaging backend application into JAR..."
    - cd backend
    - chmod +x mvnw  # Fix permissions issue
    - ./mvnw package -DskipTests -DskipITs
  artifacts:
    paths:
      - backend/target/*.jar
    exclude:
      - backend/target/*original.jar
    expire_in: 1 hour
  rules:
    - <<: *backend_changes
      if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - <<: *backend_changes
      if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  needs:
    - validate-and-build-backend

# Docker builds using Kaniko (following Claude's recommendation)
docker-build-backend:
  stage: package
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  script:
    - echo "🐳 Building backend Docker image with Kaniko..."
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --destination "${BACKEND_IMAGE}:${CI_COMMIT_SHORT_SHA}"
      --destination "${BACKEND_IMAGE}:latest"
      --cache=true
      --cache-ttl=24h
  rules:
    - <<: *backend_changes
      if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - <<: *backend_changes
      if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  needs:
    - package-backend

docker-build-frontend:
  stage: package
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  script:
    - echo "🐳 Building frontend Docker image with Kaniko..."
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile.frontend"
      --destination "${FRONTEND_IMAGE}:${CI_COMMIT_SHORT_SHA}"
      --destination "${FRONTEND_IMAGE}:latest"
      --cache=true
      --cache-ttl=24h
  rules:
    - <<: *frontend_changes
      if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - <<: *frontend_changes
      if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  needs:
    - validate-and-build-frontend

# Image scanning using your exact working configuration
trivy-scan-backend-image:
  stage: package
  image:
    name: aquasec/trivy:latest
    entrypoint: [""]
  before_script:
    - trivy --version
  script:
    - echo "🛡️ Scanning backend Docker image for vulnerabilities..."
    - trivy image --format json --output backend-trivy-report.json ${BACKEND_IMAGE}:${CI_COMMIT_SHORT_SHA}
    - trivy image --exit-code 1 --severity HIGH,CRITICAL --format table ${BACKEND_IMAGE}:${CI_COMMIT_SHORT_SHA}
  artifacts:
    paths:
      - backend-trivy-report.json
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  needs:
    - docker-build-backend
  allow_failure: false

trivy-scan-frontend-image:
  stage: package
  image:
    name: aquasec/trivy:latest
    entrypoint: [""]
  before_script:
    - trivy --version
  script:
    - echo "🛡️ Scanning frontend Docker image for vulnerabilities..."
    - trivy image --format json --output frontend-trivy-report.json ${FRONTEND_IMAGE}:${CI_COMMIT_SHORT_SHA}
    - trivy image --exit-code 1 --severity HIGH,CRITICAL --format table ${FRONTEND_IMAGE}:${CI_COMMIT_SHORT_SHA}
  artifacts:
    paths:
      - frontend-trivy-report.json
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  needs:
    - docker-build-frontend
  allow_failure: false

# =============================================================================
# DEPLOY STAGING STAGE: GitOps deployment
# =============================================================================

deploy-staging:
  stage: deploy-staging
  <<: *gitops_base
  script:
    - echo "🚀 Deploying to staging via GitOps..."
    - git clone $GITOPS_STAGING_REPO gitops-staging
    - cd gitops-staging
    - |
      # Update image tags
      if [ -n "$BACKEND_IMAGE" ]; then
        yq eval ".spec.template.spec.containers[0].image = \"${BACKEND_IMAGE}:${CI_COMMIT_SHORT_SHA}\"" -i applications/backend/deployment.yaml
        echo "Updated backend image to: ${BACKEND_IMAGE}:${CI_COMMIT_SHORT_SHA}"
      fi
      if [ -n "$FRONTEND_IMAGE" ]; then
        yq eval ".spec.template.spec.containers[0].image = \"${FRONTEND_IMAGE}:${CI_COMMIT_SHORT_SHA}\"" -i applications/frontend/deployment.yaml
        echo "Updated frontend image to: ${FRONTEND_IMAGE}:${CI_COMMIT_SHORT_SHA}"
      fi
    - |
      # Commit and push
      git config user.name "GitLab CI"
      git config user.email "ci@gitlab.com"
      git add .
      if git diff --staged --quiet; then
        echo "No changes to commit"
      else
        git commit -m "Deploy ${APP_NAME} ${CI_COMMIT_SHORT_SHA} to staging"
        git push origin main
        echo "✅ Staging deployment triggered"
      fi
  environment:
    name: staging
    url: $STAGING_BASE_URL
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  needs:
    - docker-build-backend
    - docker-build-frontend
    - trivy-scan-backend-image
    - trivy-scan-frontend-image

# =============================================================================
# E2E TEST STAGE: End-to-end testing
# =============================================================================

e2e-tests:
  stage: e2e-test
  image: cypress/included:13.6.2
  variables:
    CYPRESS_CACHE_FOLDER: "$CI_PROJECT_DIR/.cypress"
    CYPRESS_baseUrl: "$STAGING_BASE_URL"
  cache:
    key: "$CI_COMMIT_REF_SLUG-cypress"
    fallback_keys:
      - "main-cypress"
    paths:
      - .cypress/
  before_script:
    - echo "🎭 Setting up E2E tests..."
    - sleep 60
    - apk add --no-cache curl
    - cd frontend/bank-account-app
    - npm ci --prefer-offline
  script:
    - echo "🧪 Running E2E tests..."
    - |
      # Wait for staging to be ready
      for i in $(seq 1 20); do
        if curl -f "$STAGING_BASE_URL/health" >/dev/null 2>&1; then
          echo "✅ Staging ready"
          break
        fi
        echo "⏳ Waiting... attempt $i/20"
        sleep 10
      done
    - npm run e2e:headless
  artifacts:
    when: always
    paths:
      - frontend/bank-account-app/cypress/screenshots/
      - frontend/bank-account-app/cypress/videos/
    reports:
      junit:
        - frontend/bank-account-app/cypress/results/junit.xml
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  needs:
    - deploy-staging

# =============================================================================
# DEPLOY PRODUCTION STAGE: Manual production deployment
# =============================================================================

deploy-production:
  stage: deploy-production
  <<: *gitops_base
  script:
    - echo "🚀 Deploying to production via GitOps..."
    - git clone $GITOPS_PROD_REPO gitops-production
    - cd gitops-production
    - |
      # Update image tags
      if [ -n "$BACKEND_IMAGE" ]; then
        yq eval ".spec.template.spec.containers[0].image = \"${BACKEND_IMAGE}:${CI_COMMIT_SHORT_SHA}\"" -i applications/backend/deployment.yaml
      fi
      if [ -n "$FRONTEND_IMAGE" ]; then
        yq eval ".spec.template.spec.containers[0].image = \"${FRONTEND_IMAGE}:${CI_COMMIT_SHORT_SHA}\"" -i applications/frontend/deployment.yaml
      fi
    - |
      # Commit and push
      git config user.name "GitLab CI"
      git config user.email "ci@gitlab.com"
      git add .
      if git diff --staged --quiet; then
        echo "No changes to commit"
      else
        git commit -m "Deploy ${APP_NAME} ${CI_COMMIT_SHORT_SHA} to production"
        git push origin main
        echo "✅ Production deployment triggered"
      fi
  environment:
    name: production
    url: $PRODUCTION_BASE_URL
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
  needs:
    - e2e-tests

